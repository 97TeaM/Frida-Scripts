var cache = {};

const base = Process.findModuleByName("libg.so").base;

const SERVER_CONNECTION = 0xB7BA4C;
const CREATE_MESSAGE_BY_TYPE = 0x35A3A0;
const POINTER_SIZE = 4;
const SOCK_STREAM = 1;
const AF_INET = 2;
const LOGICVERSION_ISPROD = 0x5DD10C;
const LOGICVERSION_ISDEV = 0x5F0414;
const HOMEPAGE_STARTGAME = 0x438148;
const ADD_VISION_UPDATE = 0x3111E8;

var Offline = 0;

const malloc = new NativeFunction(Module.findExportByName("libc.so", "malloc"), "pointer", ["int"]);
const free = new NativeFunction(Module.findExportByName("libc.so", "free"), "void", ["pointer"]);
const pthread_mutex_lock = new NativeFunction(Module.findExportByName("libc.so", "pthread_mutex_lock"), "int", ["pointer"]);
const pthread_mutex_unlock = new NativeFunction(Module.findExportByName("libc.so", "pthread_mutex_unlock"), "int", ["pointer"]);
const pthread_cond_signal = new NativeFunction(Module.findExportByName("libc.so", "pthread_cond_signal"), "int", ["pointer"]);
const select = new NativeFunction(Module.findExportByName("libc.so", "select"), "int", ["int", "pointer", "pointer", "pointer", "pointer"]);
const memmove = new NativeFunction(Module.findExportByName("libc.so", "memmove"), "pointer", ["pointer", "pointer", "int"]);
const ntohs = new NativeFunction(Module.findExportByName("libc.so", "ntohs"), "uint16", ["uint16"]);
const inet_addr = new NativeFunction(Module.findExportByName("libc.so", "inet_addr"), "int", ["pointer"]);
const libc_send = new NativeFunction(Module.findExportByName("libc.so", "send"), "int", ["int", "pointer", "int", "int"]);
const libc_recv = new NativeFunction(Module.findExportByName("libc.so", "recv"), "int", ["int", "pointer", "int", "int"]);
const libc_close = new NativeFunction(Module.findExportByName("libc.so", "close"), "int", ["int"]);
const socket = new NativeFunction(Module.findExportByName("libc.so", "socket"), "int", ["int", "int", "int"]);
const bind = new NativeFunction(Module.findExportByName("libc.so", "bind"), "int", ["int", "pointer", "int"]);
const memset = new NativeFunction(Module.findExportByName("libc.so", "memset"), "void", ["pointer", "int", "int"]);
const htons = new NativeFunction(Module.findExportByName("libc.so", "htons"), "uint16", ["uint16"]);
const listen = new NativeFunction(Module.findExportByName("libc.so", "listen"), "int", ["int", "int"]);
const accept = new NativeFunction(Module.findExportByName("libc.so", "accept"), "int", ["int", "pointer", "pointer"]);
const pthread_create = new NativeFunction(Module.findExportByName("libc.so", "pthread_create"), "int", ["pointer", "pointer", "pointer", "pointer"]);

const Message = {
    _getByteStream: function(message) {
        return message.add(8);
    },
    _getVersion: function(message) {
        return Memory.readInt(message.add(4));
    },
    _setVersion: function(message, version) {
        Memory.writeInt(message.add(4), version);
    },
    _getMessageType: function(message) {
        return (new NativeFunction(Memory.readPointer(Memory.readPointer(message).add(20)), "int", ["pointer"]))(message);
    },
    _encode: function(message) {
        (new NativeFunction(Memory.readPointer(Memory.readPointer(message).add(8)), "void", ["pointer"]))(message);
    },
    _decode: function(message) {
        (new NativeFunction(Memory.readPointer(Memory.readPointer(message).add(12)), "void", ["pointer"]))(message);
    },
    _free: function(message) {
        (new NativeFunction(Memory.readPointer(Memory.readPointer(message).add(24)), "void", ["pointer"]))(message);
        (new NativeFunction(Memory.readPointer(Memory.readPointer(message).add(4)), "void", ["pointer"]))(message);
    }
};
const ByteStream = {
    _getOffset: function(byteStream) {
        return Memory.readInt(byteStream.add(16));
    },
    _getByteArray: function(byteStream) {
        return Memory.readPointer(byteStream.add(28));
    },
    _setByteArray: function(byteStream, array) {
        Memory.writePointer(byteStream.add(28), array);
    },
    _getLength: function(byteStream) {
        return Memory.readInt(byteStream.add(20));
    },
    _setLength: function(byteStream, length) {
        Memory.writeInt(byteStream.add(20), length);
    }
};
const Buffer = {
    _getEncodingLength: function(buffer) {
        return Memory.readU8(buffer.add(2)) << 16 | Memory.readU8(buffer.add(3)) << 8 | Memory.readU8(buffer.add(4));
    },
    _setEncodingLength: function(buffer, length) {
        Memory.writeU8(buffer.add(2), length >> 16 & 0xFF);
        Memory.writeU8(buffer.add(3), length >> 8 & 0xFF);
        Memory.writeU8(buffer.add(4), length & 0xFF);
    },
    _setMessageType: function(buffer, type) {
        Memory.writeU8(buffer.add(0), type >> 8 & 0xFF);
        Memory.writeU8(buffer.add(1), type & 0xFF);
    },
    _getMessageVersion: function(buffer) {
        return Memory.readU8(buffer.add(5)) << 8 | Memory.readU8(buffer.add(6));
    },
    _setMessageVersion: function(buffer, version) {
        Memory.writeU8(buffer.add(5), version >> 8 & 0xFF);
        Memory.writeU8(buffer.add(6), version & 0xFF);
    },
    _getMessageType: function(buffer) {
        return Memory.readU8(buffer) << 8 | Memory.readU8(buffer.add(1));
    }
}

const MessageQueue = {
    _getCapacity: function(queue) {
        return Memory.readInt(queue.add(4));
    },
    _get: function(queue, index) {
        return Memory.readPointer(Memory.readPointer(queue).add(POINTER_SIZE * index));
    },
    _set: function(queue, index, message) {
        Memory.writePointer(Memory.readPointer(queue).add(POINTER_SIZE * index), message);
    },
    _count: function(queue) {
        return Memory.readInt(queue.add(8));
    },
    _decrementCount: function(queue) {
        Memory.writeInt(queue.add(8), Memory.readInt(queue.add(8)) - 1);
    },
    _incrementCount: function(queue) {
        Memory.writeInt(queue.add(8), Memory.readInt(queue.add(8)) + 1);
    },
    _getDequeueIndex: function(queue) {
        return Memory.readInt(queue.add(12));
    },
    _getEnqueueIndex: function(queue) {
        return Memory.readInt(queue.add(16));
    },
    _setDequeueIndex: function(queue, index) {
        Memory.writeInt(queue.add(12), index);
    },
    _setEnqueueIndex: function(queue, index) {
        Memory.writeInt(queue.add(16), index);
    },
    _enqueue: function(queue, message) {
        pthread_mutex_lock(queue.sub(4));
        var index = MessageQueue._getEnqueueIndex(queue);
        MessageQueue._set(queue, index, message);
        MessageQueue._setEnqueueIndex(queue, (index + 1) % MessageQueue._getCapacity(queue));
        MessageQueue._incrementCount(queue);
        pthread_mutex_unlock(queue.sub(4));
    },
    _dequeue: function(queue) {
        var message = null;
        pthread_mutex_lock(queue.sub(4));
        if (MessageQueue._count(queue)) {
            var index = MessageQueue._getDequeueIndex(queue);
            message = MessageQueue._get(queue, index);
            MessageQueue._setDequeueIndex(queue, (index + 1) % MessageQueue._getCapacity(queue));
            MessageQueue._decrementCount(queue);
        }
        pthread_mutex_unlock(queue.sub(4));
        return message;
    }
};

function setupMessaging() {
    cache.serverConnection = Memory.readPointer(base.add(SERVER_CONNECTION));
    cache.messaging = Memory.readPointer(cache.serverConnection.add(4));
    cache.messageFactory = Memory.readPointer(cache.messaging.add(52));
    cache.recvQueue = cache.messaging.add(60);
    cache.sendQueue = cache.messaging.add(84);
    cache.state = cache.messaging.add(212);
    cache.loginMessagePtr = cache.messaging.add(216);

    cache.createMessageByType = new NativeFunction(base.add(CREATE_MESSAGE_BY_TYPE), "pointer", ["pointer", "int"]);

    cache.sendMessage = function (message) {
        Message._encode(message);
        var byteStream = Message._getByteStream(message);
        var messagePayloadLength = ByteStream._getOffset(byteStream);
        var messageBuffer = malloc(messagePayloadLength + 7);
        memmove(messageBuffer.add(7), ByteStream._getByteArray(byteStream), messagePayloadLength);
        Buffer._setEncodingLength(messageBuffer, messagePayloadLength);
        Buffer._setMessageType(messageBuffer, Message._getMessageType(message));
        Buffer._setMessageVersion(messageBuffer, Message._getVersion(message));
        libc_send(cache.fd, messageBuffer, messagePayloadLength + 7, 0);
        free(messageBuffer);
        Message._free(message);
    }

    function onWakeup() {
        var message = MessageQueue._dequeue(cache.sendQueue);
        while (message) {
            var messageType = Message._getMessageType(message);
            if (messageType === 10100) {
                message = Memory.readPointer(cache.loginMessagePtr);
                Memory.writePointer(cache.loginMessagePtr, ptr(0));
                receiveLoginOK();
                receiveOwnHomeData();
            }
            if (messageType === 14109) {
                receiveOwnHomeData();
            }
            cache.sendMessage(message);
            message = MessageQueue._dequeue(cache.sendQueue);
        }
    }

    function onReceive() {
        var headerBuffer = malloc(7);
        var Received = libc_recv(cache.fd, headerBuffer, 7, 256);
        if (Received <= 0) {
            libc_close(cache.fd);
            Interceptor.detachAll();
            init();
        }
        var messageType = Buffer._getMessageType(headerBuffer);
		if (messageType === 20104) {
			Memory.writeInt(cache.state, 5);
		}
		var payloadLength = Buffer._getEncodingLength(headerBuffer);
		var messageVersion = Buffer._getMessageVersion(headerBuffer);
		free(headerBuffer);
		var messageBuffer = malloc(payloadLength);
		libc_recv(cache.fd, messageBuffer, payloadLength, 256);
		var message = cache.createMessageByType(cache.messageFactory, messageType);
		Message._setVersion(message, messageVersion);
		var byteStream = Message._getByteStream(message);
		ByteStream._setLength(byteStream, payloadLength);
		if (payloadLength) {
			var byteArray = malloc(payloadLength);
			memmove(byteArray, messageBuffer, payloadLength);
			ByteStream._setByteArray(byteStream, byteArray);
		}
		Message._decode(message);
		MessageQueue._enqueue(cache.recvQueue, message);
		free(messageBuffer);
	}

    function offlineReceive(messageBuffer, headerBuffer) {
        var headerBuffer = malloc(7);
        var messageType = Buffer._getMessageType(headerBuffer);
        if (messageType === 20104) {
            Memory.writeInt(cache.state, 5);
            misc();
        }
        var payloadLength = Buffer._getEncodingLength(headerBuffer);
        var messageVersion = Buffer._getMessageVersion(headerBuffer);
        free(headerBuffer);
        var messageBuffer = malloc(payloadLength);
        var message = cache.createMessageByType(cache.messageFactory, messageType);
        Message._setVersion(message, messageVersion);
        var byteStream = Message._getByteStream(message);
        ByteStream._setLength(byteStream, payloadLength);
        if (payloadLength) {
            byteArray = malloc(payloadLength);
            memmove(byteArray, messageBuffer, payloadLength);
            ByteStream._setByteArray(byteStream, byteArray);
        }
        Message._decode(message);
        MessageQueue._enqueue(cache.recvQueue, message);
        free(messageBuffer);
    }

    function receiveLoginOK() {
        const LoginOkHeader = [0x4E, 0x88, 0x00, 0x00, 0x9D, 0x00, 0x00];
        const LoginOk = [0x00, 0x00, 0x00, 0x00, 0x05, 0x98, 0xD2, 0x76, 0x00, 0x00, 0x00, 0x00, 0x05, 0x98, 0xD2, 0x76, 0x00, 0x00, 0x00, 0x28, 0x67, 0x73, 0x31, 0x4C, 0x53, 0x55, 0x4D, 0x4F, 0x30, 0x68, 0x59, 0x43, 0x35, 0x56, 0x59, 0x6F, 0x54, 0x52, 0x35, 0x48, 0x41, 0x53, 0x33, 0x76, 0x33, 0x49, 0x62, 0x37, 0x4C, 0x68, 0x53, 0x30, 0x4C, 0x43, 0x37, 0x74, 0x7A, 0x70, 0x38, 0x65, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x64, 0x65, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x02, 0x52, 0x55, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00];
        offlineReceive(Memory.writeByteArray(malloc(LoginOk.length), LoginOk), Memory.writeByteArray(malloc(LoginOkHeader.length), LoginOkHeader));
    }

    function receiveOwnHomeData() {
        const OwnHomeDataHeader = [0x5E, 0x25, 0x00, 0x07, 0x7A, 0x00, 0x00];
        const OwnHomeData = [0x90, 0x93, 0xD5, 0xCA, 0x0C, 0x90, 0x93, 0xD5, 0xCA, 0x0C, 0x9F, 0x9A, 0x0C, 0xBF, 0x88, 0x7A, 0xBF, 0x88, 0x7A, 0xBF, 0x88, 0x7A, 0xBF, 0x88, 0x7A, 0x1C, 0x0A, 0x2B, 0x03, 0x32, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x21, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x9B, 0x02, 0x1D, 0x00, 0x1D, 0x01, 0x1D, 0x02, 0x1D, 0x03, 0x1D, 0x04, 0x1D, 0x05, 0x1D, 0x06, 0x1D, 0x07, 0x1D, 0x08, 0x1D, 0x09, 0x1D, 0x0A, 0x1D, 0x0B, 0x1D, 0x0C, 0x1D, 0x0D, 0x1D, 0x0E, 0x1D, 0x0F, 0x1D, 0x10, 0x1D, 0x11, 0x1D, 0x12, 0x1D, 0x13, 0x1D, 0x14, 0x1D, 0x15, 0x1D, 0x16, 0x1D, 0x17, 0x1D, 0x18, 0x1D, 0x19, 0x1D, 0x1A, 0x1D, 0x1B, 0x1D, 0x1C, 0x1D, 0x1D, 0x1D, 0x1E, 0x1D, 0x1F, 0x1D, 0x20, 0x1D, 0x21, 0x1D, 0x22, 0x1D, 0x23, 0x1D, 0x24, 0x1D, 0x25, 0x1D, 0x26, 0x1D, 0x27, 0x1D, 0x28, 0x1D, 0x29, 0x1D, 0x2A, 0x1D, 0x2B, 0x1D, 0x2C, 0x1D, 0x2D, 0x1D, 0x2E, 0x1D, 0x2F, 0x1D, 0x30, 0x1D, 0x31, 0x1D, 0x32, 0x1D, 0x33, 0x1D, 0x34, 0x1D, 0x35, 0x1D, 0x36, 0x1D, 0x37, 0x1D, 0x38, 0x1D, 0x39, 0x1D, 0x3A, 0x1D, 0x3B, 0x1D, 0x3C, 0x1D, 0x3D, 0x1D, 0x3E, 0x1D, 0x3F, 0x1D, 0x80, 0x01, 0x1D, 0x81, 0x01, 0x1D, 0x82, 0x01, 0x1D, 0x83, 0x01, 0x1D, 0x84, 0x01, 0x1D, 0x85, 0x01, 0x1D, 0x86, 0x01, 0x1D, 0x87, 0x01, 0x1D, 0x88, 0x01, 0x1D, 0x89, 0x01, 0x1D, 0x8A, 0x01, 0x1D, 0x8B, 0x01, 0x1D, 0x8C, 0x01, 0x1D, 0x8D, 0x01, 0x1D, 0x8E, 0x01, 0x1D, 0x8F, 0x01, 0x1D, 0x90, 0x01, 0x1D, 0x91, 0x01, 0x1D, 0x92, 0x01, 0x1D, 0x93, 0x01, 0x1D, 0x94, 0x01, 0x1D, 0x95, 0x01, 0x1D, 0x96, 0x01, 0x1D, 0x97, 0x01, 0x1D, 0x98, 0x01, 0x1D, 0x99, 0x01, 0x1D, 0x9A, 0x01, 0x1D, 0x9B, 0x01, 0x1D, 0x9C, 0x01, 0x1D, 0x9D, 0x01, 0x1D, 0x9E, 0x01, 0x1D, 0x9F, 0x01, 0x1D, 0xA0, 0x01, 0x1D, 0xA1, 0x01, 0x1D, 0xA2, 0x01, 0x1D, 0xA3, 0x01, 0x1D, 0xA4, 0x01, 0x1D, 0xA5, 0x01, 0x1D, 0xA6, 0x01, 0x1D, 0xA7, 0x01, 0x1D, 0xA8, 0x01, 0x1D, 0xA9, 0x01, 0x1D, 0xAA, 0x01, 0x1D, 0xAB, 0x01, 0x1D, 0xAC, 0x01, 0x1D, 0xAD, 0x01, 0x1D, 0xAE, 0x01, 0x1D, 0xAF, 0x01, 0x1D, 0xB0, 0x01, 0x1D, 0xB1, 0x01, 0x1D, 0xB2, 0x01, 0x1D, 0xB3, 0x01, 0x1D, 0xB4, 0x01, 0x1D, 0xB5, 0x01, 0x1D, 0xB6, 0x01, 0x1D, 0xB7, 0x01, 0x1D, 0xB8, 0x01, 0x1D, 0xB9, 0x01, 0x1D, 0xBA, 0x01, 0x1D, 0xBB, 0x01, 0x1D, 0xBC, 0x01, 0x1D, 0xBD, 0x01, 0x1D, 0xBE, 0x01, 0x1D, 0xBF, 0x01, 0x1D, 0x80, 0x02, 0x1D, 0x81, 0x02, 0x1D, 0x82, 0x02, 0x1D, 0x83, 0x02, 0x1D, 0x84, 0x02, 0x1D, 0x85, 0x02, 0x1D, 0x86, 0x02, 0x1D, 0x87, 0x02, 0x1D, 0x88, 0x02, 0x1D, 0x89, 0x02, 0x1D, 0x8A, 0x02, 0x1D, 0x8B, 0x02, 0x1D, 0x8C, 0x02, 0x1D, 0x8D, 0x02, 0x1D, 0x8E, 0x02, 0x1D, 0x8F, 0x02, 0x1D, 0x90, 0x02, 0x1D, 0x91, 0x02, 0x1D, 0x92, 0x02, 0x1D, 0x93, 0x02, 0x1D, 0x94, 0x02, 0x1D, 0x95, 0x02, 0x1D, 0x96, 0x02, 0x1D, 0x97, 0x02, 0x1D, 0x98, 0x02, 0x1D, 0x99, 0x02, 0x1D, 0x9A, 0x02, 0x00, 0x9F, 0x9A, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9F, 0x9A, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x08, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x88, 0x03, 0x00, 0x00, 0x8F, 0x9C, 0x01, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x02, 0x52, 0x55, 0x00, 0x00, 0x00, 0x0B, 0x53, 0x6F, 0x6C, 0x61, 0x72, 0x20, 0x42, 0x72, 0x61, 0x77, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x93, 0xD5, 0xCA, 0x0C, 0xA4, 0x01, 0x0A, 0x1E, 0x03, 0x90, 0x01, 0x0A, 0x32, 0xA8, 0x0F, 0xB4, 0x07, 0x32, 0x9C, 0x87, 0x7A, 0x00, 0x07, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x01, 0x01, 0x00, 0x9F, 0x9A, 0x0C, 0x00, 0x0F, 0x84, 0x01, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x9F, 0x9A, 0x0C, 0x00, 0x0F, 0x07, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x05, 0x00, 0x03, 0x03, 0x00, 0x9F, 0x9A, 0x0C, 0x00, 0x0F, 0x01, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x04, 0x04, 0x00, 0x9F, 0x9A, 0x0C, 0x00, 0x0F, 0x0E, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x05, 0x05, 0x00, 0x9F, 0x9A, 0x0C, 0x00, 0x0F, 0x19, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x05, 0x00, 0x06, 0x06, 0x00, 0x9F, 0x9A, 0x0C, 0x00, 0x0F, 0x12, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x07, 0x07, 0x00, 0x9F, 0x9A, 0x0C, 0x00, 0x0F, 0x8A, 0x03, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x14, 0x23, 0x8B, 0x01, 0x8C, 0x02, 0xA2, 0x04, 0xA0, 0x07, 0xA0, 0x0C, 0xA2, 0x13, 0x08, 0x01, 0x02, 0x03, 0x04, 0x05, 0x0A, 0x0F, 0x14, 0x03, 0x0A, 0x1E, 0x90, 0x01, 0x03, 0x06, 0x14, 0x3C, 0x04, 0x14, 0x32, 0x8C, 0x02, 0x98, 0x04, 0x04, 0x96, 0x02, 0x90, 0x06, 0xB0, 0x12, 0xA8, 0x28, 0x00, 0x88, 0x03, 0x14, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x02, 0x71, 0x9C, 0x48, 0x00, 0x00, 0x00, 0x00, 0x05, 0x98, 0xD2, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB6, 0xC9, 0xC6, 0x59, 0x00, 0xB6, 0xC9, 0xC6, 0x59, 0x00, 0xB6, 0xC9, 0xC6, 0x59, 0x00, 0x00, 0x00, 0x05, 0x53, 0x6F, 0x6C, 0x61, 0x72, 0x01, 0x00, 0x00, 0x00, 0x00, 0x08, 0x25, 0x17, 0x00, 0x01, 0x17, 0x04, 0x01, 0x17, 0x08, 0x01, 0x17, 0x0C, 0x01, 0x17, 0x10, 0x01, 0x17, 0x14, 0x01, 0x17, 0x18, 0x01, 0x17, 0x1C, 0x01, 0x17, 0x20, 0x01, 0x17, 0x24, 0x01, 0x17, 0x28, 0x01, 0x17, 0x2C, 0x01, 0x17, 0x30, 0x01, 0x17, 0x34, 0x01, 0x17, 0x38, 0x01, 0x17, 0x3C, 0x01, 0x17, 0x80, 0x01, 0x01, 0x17, 0x84, 0x01, 0x01, 0x17, 0x88, 0x01, 0x01, 0x17, 0x9F, 0x01, 0x01, 0x17, 0xA4, 0x01, 0x01, 0x17, 0xA9, 0x01, 0x01, 0x17, 0xAE, 0x01, 0x01, 0x17, 0xB3, 0x01, 0x01, 0x17, 0xB8, 0x01, 0x01, 0x17, 0xBD, 0x01, 0x01, 0x17, 0x82, 0x02, 0x01, 0x17, 0xB1, 0x02, 0x01, 0x17, 0xB6, 0x02, 0x01, 0x17, 0xBC, 0x02, 0x01, 0x17, 0x82, 0x03, 0x01, 0x17, 0x88, 0x03, 0x01, 0x17, 0x8E, 0x03, 0x01, 0x05, 0x01, 0x00, 0x05, 0x08, 0x00, 0x05, 0x09, 0x00, 0x05, 0x0A, 0x00, 0x21, 0x10, 0x00, 0x9F, 0x9A, 0x0C, 0x10, 0x01, 0x9F, 0x9A, 0x0C, 0x10, 0x02, 0x9F, 0x9A, 0x0C, 0x10, 0x03, 0x9F, 0x9A, 0x0C, 0x10, 0x04, 0x9F, 0x9A, 0x0C, 0x10, 0x05, 0x9F, 0x9A, 0x0C, 0x10, 0x06, 0x9F, 0x9A, 0x0C, 0x10, 0x07, 0x9F, 0x9A, 0x0C, 0x10, 0x08, 0x9F, 0x9A, 0x0C, 0x10, 0x09, 0x9F, 0x9A, 0x0C, 0x10, 0x0A, 0x9F, 0x9A, 0x0C, 0x10, 0x0B, 0x9F, 0x9A, 0x0C, 0x10, 0x0C, 0x9F, 0x9A, 0x0C, 0x10, 0x0D, 0x9F, 0x9A, 0x0C, 0x10, 0x0E, 0x9F, 0x9A, 0x0C, 0x10, 0x0F, 0x9F, 0x9A, 0x0C, 0x10, 0x10, 0x9F, 0x9A, 0x0C, 0x10, 0x11, 0x9F, 0x9A, 0x0C, 0x10, 0x12, 0x9F, 0x9A, 0x0C, 0x10, 0x13, 0x9F, 0x9A, 0x0C, 0x10, 0x14, 0x9F, 0x9A, 0x0C, 0x10, 0x15, 0x9F, 0x9A, 0x0C, 0x10, 0x16, 0x9F, 0x9A, 0x0C, 0x10, 0x17, 0x9F, 0x9A, 0x0C, 0x10, 0x18, 0x9F, 0x9A, 0x0C, 0x10, 0x19, 0x9F, 0x9A, 0x0C, 0x10, 0x1A, 0x9F, 0x9A, 0x0C, 0x10, 0x1B, 0x9F, 0x9A, 0x0C, 0x10, 0x1C, 0x9F, 0x9A, 0x0C, 0x10, 0x1D, 0x9F, 0x9A, 0x0C, 0x10, 0x1E, 0x9F, 0x9A, 0x0C, 0x10, 0x1F, 0x9F, 0x9A, 0x0C, 0x10, 0x21, 0x9F, 0x9A, 0x0C, 0x21, 0x10, 0x00, 0x9F, 0x9A, 0x0C, 0x10, 0x01, 0x9F, 0x9A, 0x0C, 0x10, 0x02, 0x9F, 0x9A, 0x0C, 0x10, 0x03, 0x9F, 0x9A, 0x0C, 0x10, 0x04, 0x9F, 0x9A, 0x0C, 0x10, 0x05, 0x9F, 0x9A, 0x0C, 0x10, 0x06, 0x9F, 0x9A, 0x0C, 0x10, 0x07, 0x9F, 0x9A, 0x0C, 0x10, 0x08, 0x9F, 0x9A, 0x0C, 0x10, 0x09, 0x9F, 0x9A, 0x0C, 0x10, 0x0A, 0x9F, 0x9A, 0x0C, 0x10, 0x0B, 0x9F, 0x9A, 0x0C, 0x10, 0x0C, 0x9F, 0x9A, 0x9A, 0x0C, 0x10, 0x10, 0x9F, 0x9A, 0x0C, 0x10, 0x11, 0x9F, 0x9A, 0x0C, 0x10, 0x12, 0x9F, 0x9A, 0x0C, 0x10, 0x13, 0x9F, 0x9A, 0x0C, 0x10, 0x14, 0x9F, 0x9A, 0x0C, 0x10, 0x15, 0x9F, 0x9A, 0x0C, 0x10, 0x16, 0x9F, 0x9A, 0x0C, 0x10, 0x17, 0x9F, 0x9A, 0x0C, 0x10, 0x18, 0x9F, 0x9A, 0x0C, 0x10, 0x19, 0x9F, 0x9A, 0x0C, 0x10, 0x1A, 0x9F, 0x9A, 0x0C, 0x10, 0x1B, 0x9F, 0x9A, 0x0C, 0x10, 0x1C, 0x9F, 0x9A, 0x0C, 0x10, 0x1D, 0x9F, 0x9A, 0x0C, 0x10, 0x1E, 0x9F, 0x9A, 0x0C, 0x10, 0x1F, 0x9F, 0x9A, 0x0C, 0x10, 0x21, 0x9F, 0x9A, 0x0C, 0x00, 0x21, 0x10, 0x00, 0x00, 0x10, 0x01, 0x00, 0x10, 0x02, 0x00, 0x10, 0x03, 0x00, 0x10, 0x04, 0x00, 0x10, 0x05, 0x00, 0x10, 0x06, 0x00, 0x10, 0x07, 0x00, 0x10, 0x08, 0x00, 0x10, 0x09, 0x00, 0x10, 0x0A, 0x00, 0x10, 0x0B, 0x00, 0x10, 0x0C, 0x00, 0x10, 0x0D, 0x00, 0x10, 0x0E, 0x00, 0x10, 0x0F, 0x00, 0x10, 0x10, 0x00, 0x10, 0x11, 0x00, 0x10, 0x12, 0x00, 0x10, 0x13, 0x00, 0x10, 0x14, 0x00, 0x10, 0x15, 0x00, 0x10, 0x16, 0x00, 0x10, 0x17, 0x00, 0x10, 0x18, 0x00, 0x10, 0x19, 0x00, 0x10, 0x1A, 0x00, 0x10, 0x1B, 0x00, 0x10, 0x1C, 0x00, 0x10, 0x1D, 0x00, 0x10, 0x1E, 0x00, 0x10, 0x1F, 0x00, 0x10, 0x21, 0x00, 0x21, 0x10, 0x00, 0x07, 0x10, 0x01, 0x07, 0x10, 0x02, 0x07, 0x10, 0x03, 0x07, 0x10, 0x04, 0x07, 0x10, 0x05, 0x07, 0x10, 0x06, 0x07, 0x10, 0x07, 0x07, 0x10, 0x08, 0x07, 0x10, 0x09, 0x07, 0x10, 0x0A, 0x07, 0x10, 0x0B, 0x07, 0x10, 0x0C, 0x07, 0x10, 0x0D, 0x07, 0x10, 0x0E, 0x07, 0x10, 0x0F, 0x07, 0x10, 0x10, 0x07, 0x10, 0x11, 0x07, 0x10, 0x12, 0x07, 0x10, 0x13, 0x07, 0x10, 0x14, 0x07, 0x10, 0x15, 0x07, 0x10, 0x16, 0x07, 0x10, 0x17, 0x07, 0x10, 0x18, 0x07, 0x10, 0x19, 0x07, 0x10, 0x1A, 0x07, 0x10, 0x1B, 0x07, 0x10, 0x1C, 0x07, 0x10, 0x1D, 0x07, 0x10, 0x1E, 0x07, 0x10, 0x1F, 0x07, 0x10, 0x21, 0x07, 0x94, 0x01, 0x17, 0x8C, 0x01, 0x01, 0x17, 0x8D, 0x01, 0x01, 0x17, 0x8E, 0x01, 0x01, 0x17, 0x8F, 0x01, 0x01, 0x17, 0x90, 0x01, 0x01, 0x17, 0x91, 0x01, 0x01, 0x17, 0x92, 0x01, 0x01, 0x17, 0x93, 0x01, 0x01, 0x17, 0x94, 0x01, 0x01, 0x17, 0x95, 0x01, 0x01, 0x17, 0x96, 0x01, 0x01, 0x17, 0x97, 0x01, 0x01, 0x17, 0x98, 0x01, 0x01, 0x17, 0x99, 0x01, 0x01, 0x17, 0x9A, 0x01, 0x01, 0x17, 0x9B, 0x01, 0x01, 0x17, 0x9C, 0x01, 0x01, 0x17, 0x9D, 0x01, 0x01, 0x17, 0x9E, 0x01, 0x01, 0x17, 0xA3, 0x01, 0x01, 0x17, 0xA8, 0x01, 0x01, 0x17, 0xAD, 0x01, 0x01, 0x17, 0xB2, 0x01, 0x01, 0x17, 0xB7, 0x01, 0x01, 0x17, 0xBC, 0x01, 0x01, 0x17, 0x81, 0x02, 0x01, 0x17, 0x86, 0x02, 0x01, 0x17, 0x87, 0x02, 0x01, 0x17, 0x88, 0x02, 0x01, 0x17, 0x89, 0x02, 0x01, 0x17, 0x8A, 0x02, 0x01, 0x17, 0x8B, 0x02, 0x01, 0x17, 0x8C, 0x02, 0x01, 0x17, 0x8D, 0x02, 0x01, 0x17, 0x8E, 0x02, 0x01, 0x17, 0x8F, 0x02, 0x01, 0x17, 0x90, 0x02, 0x01, 0x17, 0x91, 0x02, 0x01, 0x17, 0x92, 0x02, 0x01, 0x17, 0x93, 0x02, 0x01, 0x17, 0x94, 0x02, 0x01, 0x17, 0x95, 0x02, 0x01, 0x17, 0x96, 0x02, 0x01, 0x17, 0x97, 0x02, 0x01, 0x17, 0x98, 0x02, 0x01, 0x17, 0x99, 0x02, 0x01, 0x17, 0x9A, 0x02, 0x01, 0x17, 0x9B, 0x02, 0x01, 0x17, 0x9C, 0x02, 0x01, 0x17, 0x9D, 0x02, 0x01, 0x17, 0x9E, 0x02, 0x01, 0x17, 0x9F, 0x02, 0x01, 0x17, 0xA0, 0x02, 0x01, 0x17, 0xA1, 0x02, 0x01, 0x17, 0xA2, 0x02, 0x01, 0x17, 0xA3, 0x02, 0x01, 0x17, 0xA4, 0x02, 0x01, 0x17, 0xA5, 0x02, 0x01, 0x17, 0xA6, 0x02, 0x01, 0x17, 0xA7, 0x02, 0x01, 0x17, 0xA8, 0x02, 0x01, 0x17, 0xA9, 0x02, 0x01, 0x17, 0xAA, 0x02, 0x01, 0x17, 0xAB, 0x02, 0x01, 0x17, 0xAC, 0x02, 0x01, 0x17, 0xAD, 0x02, 0x01, 0x17, 0xAE, 0x02, 0x01, 0x17, 0xAF, 0x02, 0x01, 0x17, 0xB0, 0x02, 0x01, 0x17, 0xB5, 0x02, 0x01, 0x17, 0xBA, 0x02, 0x01, 0x17, 0xBB, 0x02, 0x01, 0x17, 0x80, 0x03, 0x01, 0x17, 0x81, 0x03, 0x01, 0x17, 0x86, 0x03, 0x01, 0x17, 0x87, 0x03, 0x01, 0x17, 0x8C, 0x03, 0x01, 0x17, 0x8D, 0x03, 0x01, 0x17, 0x92, 0x03, 0x01, 0x17, 0x93, 0x03, 0x01, 0x17, 0x98, 0x03, 0x01, 0x17, 0x99, 0x03, 0x01, 0x17, 0x9E, 0x03, 0x01, 0x17, 0x9F, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x90, 0x93, 0xD5, 0xCA, 0x0C, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00];
        offlineReceive(Memory.writeByteArray(malloc(OwnHomeData.length), OwnHomeData), Memory.writeByteArray(malloc(OwnHomeDataHeader.length), OwnHomeDataHeader));
    }

    function receiveLobbyInfo() {
        const LobbyInfoHeader = [0x5B, 0xA1, 0x00, 0x00, 0x34, 0x00, 0x00];
        const LobbyInfo = [0x01, 0x00, 0x00, 0x00, 0x2E, 0x53, 0x6F, 0x6C, 0x61, 0x72, 0x20, 0x42, 0x72, 0x61, 0x77, 0x6C, 0x20, 0x56, 0x32, 0x37, 0x2E, 0x31, 0x33, 0x30, 0x2E, 0x31, 0x20, 0x28, 0x50, 0x52, 0x4F, 0x44, 0x29, 0x0A, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3A, 0x20, 0x31, 0x32, 0x37, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x31, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00];
        offlineReceive(Memory.writeByteArray(malloc(LobbyInfo.length), LobbyInfo), Memory.writeByteArray(malloc(LobbyInfoHeader.length), LobbyInfoHeader));
    }

    function misc() {
        Interceptor.replace(base.add(LOGICVERSION_ISPROD), new NativeCallback(function() {
            return 0;
        }, "int", []));

        Interceptor.replace(base.add(LOGICVERSION_ISDEV), new NativeCallback(function() {
            return 1;
        }, "int", []));

        Interceptor.attach(base.add(HOMEPAGE_STARTGAME), {
            onEnter(args) {
                args[3] = ptr(3);
                args[6] = ptr(1);
                args[8] = ptr(1);
            }
        });

        Interceptor.attach(base.add(ADD_VISION_UPDATE), {
            onEnter(args) {
                args[1].add(96).writeInt(args[1].add(84).readInt());
                args[1].add(100).writeInt(1); // IsBrawlTv
            }
        });
    }

    Interceptor.attach(Module.findExportByName("libc.so", "pthread_cond_signal"), {
        onEnter() {
            onWakeup();
        }
    });

    Interceptor.attach(Module.findExportByName("libc.so", "select"), {
        onEnter() {
            onReceive();
        }
    });
}

function setupOffline() {
    serverfd = socket(AF_INET, SOCK_STREAM, 0);
    var addr = malloc(16);
    memset(addr, 0, 16);
    addr.writeU16(AF_INET);
    var port = htons(9339);
    addr.add(2).writeU16(port);
    bind(serverfd, addr, 16);
    listen(serverfd, 5);
}

function init() {
    Interceptor.attach(Module.findExportByName("libc.so", "connect"), {
        onEnter(args) {
            if (Offline === 0) {
                setupOffline();
                Offline = 1;
            }
            if (ntohs(Memory.readU16(args[1].add(2))) === 9339) {
                cache.fd = args[0].toInt32();
                Memory.writeInt(args[1].add(4), inet_addr(Memory.allocUtf8String("127.0.0.1")));
                setupMessaging();
            }
        }
    });
}